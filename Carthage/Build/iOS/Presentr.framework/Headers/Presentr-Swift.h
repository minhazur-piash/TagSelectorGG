// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import ObjectiveC;
@import CoreGraphics;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSBundle;
@class NSCoder;

/**
  UIViewController subclass that displays the alert
*/
SWIFT_CLASS("_TtC8Presentr19AlertViewController")
@interface AlertViewController : UIViewController
/**
  Text that will be used as the title for the alert
*/
@property (nonatomic, copy) NSString * _Nullable titleText;
/**
  Text that will be used as the body for the alert
*/
@property (nonatomic, copy) NSString * _Nullable bodyText;
/**
  If set to false, alert wont auto-dismiss the controller when an action is clicked. Dismissal will be up to the action’s handler. Default is true.
*/
@property (nonatomic) BOOL autoDismiss;
/**
  If autoDismiss is set to true, then set this property if you want the dismissal to be animated. Default is true.
*/
@property (nonatomic) BOOL dismissAnimated;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (void)updateViewConstraints;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface AlertViewController (SWIFT_EXTENSION(Presentr))
@end

@class UIColor;

/**
  Main Presentr class. This is the point of entry for using the framework.
*/
SWIFT_CLASS("_TtC8Presentr8Presentr")
@interface Presentr : NSObject
/**
  Should the presented controller have rounded corners. Default is true, except for .BottomHalf and .TopHalf presentation types.
*/
@property (nonatomic) BOOL roundCorners;
/**
  Radius of rounded corners if roundCorners is true. Default is 4.
*/
@property (nonatomic) CGFloat cornerRadius;
/**
  Should the presented controller dismiss on background tap. Default is true.
*/
@property (nonatomic) BOOL dismissOnTap;
/**
  Should the presented controller dismiss on Swipe inside the presented view controller. Default is false.
*/
@property (nonatomic) BOOL dismissOnSwipe;
/**
  Should the presented controller use animation when dismiss on background tap. Default is true.
*/
@property (nonatomic) BOOL dismissAnimated;
/**
  Color of the background. Default is Black.
*/
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/**
  Opacity of the background. Default is 0.7.
*/
@property (nonatomic) float backgroundOpacity;
/**
  Should the presented controller blur the background. Default is false.
*/
@property (nonatomic) BOOL blurBackground;
/**
  The type of blur to be applied to the background. Ignored if blurBackground is set to false. Default is Dark.
*/
@property (nonatomic) UIBlurEffectStyle blurStyle;
/**
  Public helper class method for creating and configuring an instance of the ‘AlertViewController’
  \param title Title to be used in the Alert View Controller.

  \param body Body of the message to be displayed in the Alert View Controller.


  returns:
  Returns a configured instance of ‘AlertViewController’
*/
+ (AlertViewController * _Nonnull)alertViewControllerWithTitle:(NSString * _Nonnull)title body:(NSString * _Nonnull)body;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UIPresentationController;
@protocol UIViewControllerAnimatedTransitioning;

@interface Presentr (SWIFT_EXTENSION(Presentr)) <UIViewControllerTransitioningDelegate>
- (UIPresentationController * _Nullable)presentationControllerForPresentedViewController:(UIViewController * _Nonnull)presented presentingViewController:(UIViewController * _Nullable)presenting sourceViewController:(UIViewController * _Nonnull)source;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed;
@end

@protocol UIViewControllerContextTransitioning;

/**
  Class that handles animating the transition. Override this class if you want to create your own transition animation.
*/
SWIFT_CLASS("_TtC8Presentr17PresentrAnimation")
@interface PresentrAnimation : NSObject
/**
  Spring damping for the UIView animation. Default is 300. Override to customize.
*/
@property (nonatomic, readonly) CGFloat springDamping;
/**
  Initial spring velocity for the UIView animation. Default is 5. Override to customize.
*/
@property (nonatomic, readonly) CGFloat initialSpringVelocity;
- (CGFloat)initialSpringVelocity SWIFT_METHOD_FAMILY(none);
/**
  Animation duration. Default is 0.5, override to customize.
*/
@property (nonatomic, readonly) NSTimeInterval animationDuration;
/**
  Method used to create an initial frame for the animation. Override to customize, default is 0,0,0,0.
  \param containerFrame The container frame.

  \param finalFrame The final frame for the view controller.


  returns:
  The initial frame for the animation.
*/
- (CGRect)transformWithContainerFrame:(CGRect)containerFrame finalFrame:(CGRect)finalFrame;
/**
  If you want to completely handle the transition animation on your own, override this method and return true. If you return true and handle the animation on your own, all the other animation properties of this class will be ignored.
  \param transitionContext The transition context for the transition animation.


  returns:
  A boolean indicating if you want to use this custom animation instead of the included version.
*/
- (BOOL)customAnimationUsing:(id <UIViewControllerContextTransitioning> _Nonnull)transitionContext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface PresentrAnimation (SWIFT_EXTENSION(Presentr)) <UIViewControllerAnimatedTransitioning>
- (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning> _Nullable)transitionContext;
- (void)animateTransition:(id <UIViewControllerContextTransitioning> _Nonnull)transitionContext;
@end


/**
  The ‘PresentrDelegate’ protocol defines methods that you use to respond to changes from the ‘PresentrController’. All of the methods of this protocol are optional.
*/
SWIFT_PROTOCOL("_TtP8Presentr16PresentrDelegate_")
@protocol PresentrDelegate
@optional
/**
  Asks the delegate if it should dismiss the presented controller on the tap of the outer chrome view.
  Use this method to validate requirments or finish tasks before the dismissal of the presented controller.
  After things are wrapped up and verified it may be good to dismiss the presented controller automatically so the user does’t have to close it again.
  \param keyboardShowing Whether or not the keyboard is currently being shown by the presented view.


  returns:
  False if the dismissal should be prevented, otherwise, true if the dimissal should occur.
*/
- (BOOL)presentrShouldDismissWithKeyboardShowing:(BOOL)keyboardShowing;
@end


@interface UIViewController (SWIFT_EXTENSION(Presentr))
/**
  Public method for presenting a view controller, using the custom presentation. Called from the UIViewController extension.
  \param presentr Presentr object used for custom presentation.

  \param viewController The view controller to be presented.

  \param animated Animation boolean.

  \param completion Completion block.

*/
- (void)customPresentViewController:(Presentr * _Nonnull)presentr viewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
@end

#pragma clang diagnostic pop
